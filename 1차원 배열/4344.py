'''
문제
대학생 새내기들의 90%는 자신이 반에서 평균은 넘는다고 생각한다.
당신은 그들에게 슬픈 진실을 알려줘야 한다.

입력
첫째 줄에는 테스트 케이스의 개수 C가 주어진다.

둘째 줄부터 각 테스트 케이스마다 학생의 수 N(1 ≤ N ≤ 1000, N은 정수)이 첫 수로 주어지고, 이어서 N명의 점수가 주어진다.
점수는 0보다 크거나 같고, 100보다 작거나 같은 정수이다.

출력
각 케이스마다 한 줄씩 평균을 넘는 학생들의 비율을 반올림하여 소수점 셋째 자리까지 출력한다.

예제 입력 1
5
5 50 50 70 80 100
7 100 95 90 80 70 60 50
3 70 90 80
3 70 90 81
9 100 99 98 97 96 95 94 93 91
예제 출력 1
40.000%
57.143%
33.333%
66.667%
55.556%
'''
N = int(input())
for i in range(N):
    scores = list(map(int,input().split()))
    n = scores.pop(0)
    up_to_mean = float(0)
    mean = sum(scores)/n
    for score in scores:
        if score > mean:
            up_to_mean += 1
    print('{0:0.3f}%'.format(round(up_to_mean/n*100,3)))

# ------------------------------------------------------------------------------------------------------------------정리
# exec(int(input())*'b,*c=map(int,input().split());print(f"{sum(b*i>sum(c)for i in c)/b:.3%}");')

# eval()은 문자열로 된 단일 표현식의 값을 반환한다.
# x = 1 과 같은 명령문은 입력할 수 없다.
#
# >>> exp = '1+234/32+153*55-2'
# >>> eval(exp)
# 8421.3125
#
#
# exec()은 동적으로 생성된 명령문을 실행한다.
#
# >>> a = 1
# >>> exec('a = 2')
# >>> a
# 2
#
# 단일 명령문을 비롯해 긴 명령문도 실행 가능하다.
#
# >>> exp = '''
# ... for i in range(3):
# ...     print('be a cool developer')
# ... '''
# >>> exec(exp)
# be a cool developer
# be a cool developer
# be a cool developer
#
# 그러나 eval()처럼 표현식의 값을 반환하지는 않는다.
#
# >>> exec('1+234+122')
#
# # 반환값 없이 실행만 된다.
